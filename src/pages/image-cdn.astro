---
import { Image } from 'astro:assets';
import ContextAlert from '../components/ContextAlert.astro';
import Layout from '../layouts/Layout.astro';
import Markdown from '../components/Markdown.astro';
import corgi from '../assets/corgi.jpg';
import { getNetlifyContext } from '../utils';
import ShapeEditor from './_components/ShapeEditor.tsx';
import { uploadDisabled } from '../utils';

const uploadDisabledText = `
`;

const sampleImage = '/images/corgi.jpg';

const ctx = getNetlifyContext();
const forceWebP = ctx === 'dev';
const sampleImageSrcSet = [640, 1280, 2048]
    .map((size) => {
        return `/.netlify/images?url=${sampleImage}&w=${size}${forceWebP ? '&fm=webp' : ''} ${size}w`;
    })
    .join(', ');
const sizes = '(max-width: 1024px) 100vw, 1024px';

const astroImageSnippet = `
## Using the built-in Astro &lt;Image /&gt; component

Astro's \`Image\` component will automatically use Netlify Image CDN to serve optimized images.

~~~jsx
---
import { Image } from 'astro:assets';
import corgi from '../assets/corgi.jpg';
---
// Later in your markup...
<Image src={corgi} alt="Corgi" /* ... additional props */ />
~~~
`;

const originalVsCdnSnippet = `
`;

const devModeWarning = `
`;
---

<Layout title="分组及考核">
    <div class="flex flex-col gap-12 sm:gap-16">
        <section class="space-y-8">
            <ContextAlert
                addedChecksFunction={(ctx) => {
                    return ctx === 'dev' ? devModeWarning : null;
                }}
            />
            <h1>分组及考核</h1>
        </section>
        <section>
            <Markdown content={astroImageSnippet} class="mb-8" />
            <figure>
                <Image src={corgi} alt="Corgi" class="border-2 border-white rounded-lg" />
                <figcaption class="mt-2 text-sm italic">
                    20级学长作品：六足机器人
                </figcaption>
            </figure>
        </section>
        <section>
            <Markdown content={originalVsCdnSnippet} class="mb-8" />
            <div class="diff aspect-[3/2] rounded-lg border-2 border-white">
                <div class="diff-item-1">
                    <div>
                        <div class="relative">
                            <span class="hidden absolute py-1.5 px-2.5 text-sm rounded-lg bg-neutral-900/70 top-2.5 right-2.5"></span>
                            <img srcset={sampleImageSrcSet} alt="Corgi" />
                        </div>
                    </div>
                </div>
                <div class="diff-resizer"></div>
            </div>
        </section>
    </div>
    <!-- 包裹 ShapeEditor 和覆盖文字的容器 -->
    <div class="relative mb-6">
        <!-- 覆盖文字 -->
        <div class="absolute top-0 left-0 bg-black bg-opacity-50 text-white text-lg px-4 py-2 rounded">
            嵌入式组
        </div>
        <ShapeEditor client:load />
    </div>    
    <div class="relative mb-6">
        <!-- 覆盖文字 -->
        <div class="absolute top-0 left-0 bg-black bg-opacity-50 text-white text-lg px-4 py-2 rounded">
            软件组
        </div>
        <ShapeEditor client:load />
    </div>    
    <div class="relative mb-6">
        <!-- 覆盖文字 -->
        <div class="absolute top-0 left-0 bg-black bg-opacity-50 text-white text-lg px-4 py-2 rounded">
            机械组
        </div>
        <ShapeEditor client:load />
    </div>    

</Layout>

<script>
    const images = document.querySelectorAll<HTMLImageElement>('.diff img');

    images.forEach((image) => {
        if (image.complete) {
            showImageSize(image);
        } else {
            image.addEventListener('load', () => {
                showImageSize(image);
            });
        }
    });

    function showImageSize(image: HTMLImageElement) {
        const imageEntry = window?.performance?.getEntriesByName(image.currentSrc)?.[0] as PerformanceResourceTiming;
        if (imageEntry && imageEntry.encodedBodySize) {
            const imageOverlay = image.previousElementSibling;
            imageOverlay.classList.remove('hidden');
            imageOverlay.textContent = `Size: ${Math.ceil(imageEntry.encodedBodySize / 1024)}KB`;
        }
    }
</script>
