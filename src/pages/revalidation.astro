---
import Layout from '../layouts/Layout.astro';
import ContextAlert from '../components/ContextAlert.astro';
import Markdown from '../components/Markdown.astro';
import { cacheHeaders, randomInt } from '../utils';
import { Image } from 'astro:assets';
import Layout from '../layouts/Layout.astro';
import corgi from '../assets/spider.jpg';
import dog1 from '../assets/dog1.jpg';
import dog2 from '../assets/dog2.png';
import dog3 from '../assets/dog3.jpg';
import { getNetlifyContext } from '../utils';
 
const sampleImage = '/images/corgi.jpg';

const ctx = getNetlifyContext();
const forceWebP = ctx === 'dev';
const sampleImageSrcSet = [640, 1280, 2048]
    .map((size) => {
        return `/.netlify/images?url=${sampleImage}&w=${size}${forceWebP ? '&fm=webp' : ''} ${size}w`;
    })
    .join(', ');
const sizes = '(max-width: 1024px) 100vw, 1024px';

export const prerender = false;

const tags = ['/revalidation', 'cats-related', 'all-pets-related'];
const headers = cacheHeaders(365, tags);

Object.entries(headers).map(([k, v]) => {
    Astro.response.headers.set(k, v);
});

const explainer = `


`;
const devModeWarning = `
In local development, optimization is performed locally without automatic format
detection, so format is set to WebP.
`;

const exampleTag = tags[randomInt(0, tags.length - 1)];
---

<Layout title="Revalidation">
    <h1 class="mb-10">实验室科创成果</h1>
    <Markdown content={explainer} class="mb-10" />
    <div class="flex flex-col gap-12 sm:gap-16">
        <section class="space-y-8">
            <ContextAlert
                addedChecksFunction={(ctx) => {
                    return ctx === 'dev' ? devModeWarning : null;
                }}
            />
        </section>
        <section>
            <figure>
                <Image src={corgi} alt="Corgi" class="border-2 border-white rounded-lg" />
            </figure>
        </section>
        <section>
            <figure>
                <Image src={dog1} alt="dog1" class="border-2 border-white rounded-lg" />
                <figcaption class="mt-2 text-sm italic">
                    Credit: photo by 
                </figcaption>

            </figure>

        </section>
        <section>
            <figure>
                <Image src={dog2} alt="dog2" class="border-2 border-white rounded-lg" />
                <figcaption class="mt-2 text-sm italic">
                    Credit: photo by 
                </figcaption>

            </figure>
        </section>
        <section>
            <figure>
                <Image src={dog3} alt="dog3" class="border-2 border-white rounded-lg" />
                <figcaption class="mt-2 text-sm italic">
                    Credit: photo by 
                </figcaption>

            </figure>
        </section>

    </div>

</Layout>

<script>
    function revalidate(tag: string) {
        fetch('/api/revalidate', {
            method: 'POST',
            body: JSON.stringify({ tags: [tag] }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        alert(`Invalidated tag: ${tag}`);
    }

    const revalidateButton = document.querySelectorAll('button.revalidate-button')[0];
    revalidateButton.addEventListener('click', (e) => {
        const tag = (e.target as HTMLButtonElement).getAttribute('data-tag');
        revalidate(tag);
    });
</script>
